{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.baseUrl = 'http://localhost:9091/products';\n      this.categoryUrl = 'http://localhost:9091/product-category';\n    }\n\n    getProductCategories() {\n      let categories = this.httpClient.get(this.categoryUrl);\n      return categories.pipe(map(response => response._embedded.productCategory));\n    }\n\n    getProduct(theProductId) {\n      // need to build URL based on product id\n      const productUrl = `http://localhost:9091/products/${theProductId}`;\n      return this.httpClient.get(productUrl);\n    }\n\n    getProductListPaginate(thePage, thePageSize, theCategoryId) {\n      // need to build URL based on category id, page and size\n      const searchUrl = `http://localhost:9091/products/search/findByCategoryId?id=${theCategoryId}` + `&page=${thePage}&size=${thePageSize}`;\n      return this.httpClient.get(searchUrl);\n    }\n\n    getProductList(theCategoryId) {\n      // need to build URL based on category id\n      const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\n      return this.getProducts(searchUrl);\n    }\n\n    searchProducts(theKeyword) {\n      // need to build URL based on the keyword\n      const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}`;\n      return this.getProducts(searchUrl);\n    }\n\n    searchProductsPaginate(thePage, thePageSize, theKeyword) {\n      // need to build URL based on keyword, page and size\n      const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}` + `&page=${thePage}&size=${thePageSize}`;\n      return this.httpClient.get(searchUrl);\n    }\n\n    getProducts(searchUrl) {\n      return this.httpClient.get(searchUrl).pipe(map(response => response._embedded.products));\n    } // getAllProducts(): Observable<Product[]> {\n    //   let products = this.httpClient.get<GetResponseProducts>(this.baseUrl);\n    //   return products.pipe(map((response) => response._embedded.products));\n    // }\n\n\n    getAllProducts(currentPage, pageSize) {\n      const url = `${this.baseUrl}?page=${currentPage}&size=${pageSize}`;\n      return this.httpClient.get(url).pipe(map(response => ({\n        products: response._embedded.products,\n        page: response.page\n      })));\n    }\n\n    getProductsByCategory(categoryId, currentPage, pageSize) {\n      const url = `${this.baseUrl}/search/findByCategoryId?id=${categoryId}&page=${currentPage}&size=${pageSize}`;\n      return this.httpClient.get(url).pipe(map(response => ({\n        products: response._embedded.products,\n        page: response.page\n      })));\n    }\n\n    addProduct(newProduct) {\n      // console.log('pRODUCT service: ' + JSON.stringify(newProduct));\n      const product = {\n        sku: newProduct.sku || '',\n        name: newProduct.name || '',\n        description: newProduct.description || '',\n        brand: newProduct.brand || '',\n        discount: newProduct.discount || '',\n        unitPrice: newProduct.unitPrice || 0,\n        totalSold: newProduct.totalSold || 0,\n        unitsInStock: newProduct.unitsInStock || 0,\n        category: newProduct.category || 0,\n        imageUrl: newProduct.imageUrl || ''\n      };\n      console.log('ADDING ' + JSON.stringify(product));\n      return this.httpClient.post(this.baseUrl, newProduct);\n    }\n\n    addCategory(newCategory) {\n      const category = {\n        name: newCategory.categoryName || ''\n      };\n      console.log('ADDING ' + JSON.stringify(category));\n      return this.httpClient.post(this.categoryUrl, newCategory);\n    }\n\n  }\n\n  ProductService.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module"}