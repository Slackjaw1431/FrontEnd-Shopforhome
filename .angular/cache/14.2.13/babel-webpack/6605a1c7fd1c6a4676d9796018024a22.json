{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.baseUrl = 'http://localhost:9090/products';\n      this.categoryUrl = 'http://localhost:9090/product-category';\n    }\n\n    getProductCategories() {\n      let categories = this.httpClient.get(this.categoryUrl);\n      return categories.pipe(map(response => response._embedded.productCategory));\n    }\n\n    getProduct(theProductId) {\n      // need to build URL based on product id\n      const productUrl = `http://localhost:9090/products/${theProductId}`;\n      return this.httpClient.get(productUrl);\n    }\n\n    getProductListPaginate(thePage, thePageSize, theCategoryId) {\n      // need to build URL based on category id, page and size\n      const searchUrl = `http://localhost:9090/products/search/findByCategoryId?id=${theCategoryId}` + `&page=${thePage}&size=${thePageSize}`;\n      return this.httpClient.get(searchUrl);\n    }\n\n    getProductList(theCategoryId) {\n      // need to build URL based on category id\n      const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\n      return this.getProducts(searchUrl);\n    }\n\n    searchProducts(theKeyword) {\n      // need to build URL based on the keyword\n      const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}`; //   return this.getProducts(searchUrl);\n      // }\n      // searchProductsPaginate(\n      //   thePage: number,\n      //   thePageSize: number,\n      //   theKeyword: string\n      // ): Observable<GetResponseProducts> {\n      //   // need to build URL based on keyword, page and size\n      //   const searchUrl =\n      //     `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}` +\n      //     `&page=${thePage}&size=${thePageSize}`;\n      //   return this.httpClient.get<GetResponseProducts>(searchUrl);\n      // }\n    } //   return this.getProducts(searchUrl);\n    // }\n    // searchProductsPaginate(\n    //   thePage: number,\n    //   thePageSize: number,\n    //   theKeyword: string\n    // ): Observable<GetResponseProducts> {\n    //   // need to build URL based on keyword, page and size\n    //   const searchUrl =\n    //     `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}` +\n    //     `&page=${thePage}&size=${thePageSize}`;\n    //   return this.httpClient.get<GetResponseProducts>(searchUrl);\n    // }\n\n\n    getProducts(searchUrl) {\n      return this.httpClient.get(searchUrl).pipe(map(response => response._embedded.products));\n    }\n\n    getAllProducts() {\n      let products = this.httpClient.get(this.baseUrl);\n      return products.pipe(map(response => response._embedded.products));\n    }\n\n  }\n\n  ProductService.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module"}